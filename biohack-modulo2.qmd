---
logo: images/icon1_nb.png
lang: es
filters:
  - timer
format: 
  letterbox-revealjs:
    theme: custom.scss
    progress: false
    menu: true
    width: 1400
    height: 720
    slide-number: true
    preview-links: auto
    touch: true
    chalkboard:
      theme: whiteboard
      boardmarker-width: 4
      buttons: false
    revealjs-plugins:
      - pointer
      
callout-appearance: simple
---

## 

::: columns
::: {.column width="37.5%"}
![](images/icon1_nb.png){style="margin-left:-40px"}
:::

::: {.column width="60%"}
::: {.title data-id="title"}
M√≥dulo 2: Proyectos en R y buenas pr√°cticas de programaci√≥n
:::

Mauricio Moreno, PhD
:::
:::

![](images/pat-whelen-yRvYmE7WVec-unsplash.jpg){.image-left}

<!-- https://unsplash.com/photos/train-rail-near-brown-building-during-daytime-yRvYmE7WVec?utm_content=creditShareLink&utm_medium=referral&utm_source=unsplash -->

## Introducci√≥n {.smaller}

::: columns
::: {.column width="60%"}
::: incremental
-   ¬øC√≥mo comenzaste tu aprendizaje de R? 

    -   Quiz√° este curso sea tu primera experiencia con R

    -   Para otros (incluy√©ndome), fue parte de alg√∫n curso de estad√≠stica

    -   O te viste forzado a aprenderlo por un trabajo (en la marcha incluso)

-   Independientemente del estilo de programaci√≥n que forjes, a la larga es com√∫n que tus scripts:

    -   Terminen conteniendo miles de l√≠neas

    -   Est√©n por todos lados en tu computador

    -   Que te sea dif√≠cil compartirlos, porque apenas si t√∫ los entiendes
:::
:::

::: {.column width="37.5%"}
:::
:::

![](images/when.jpg){.image-right}

## ¬øPor qu√© evitar esto?

::: incremental
-   Escribir buen c√≥digo nos ayuda a nosotros mismos (en el futuro)

-   Ya sea en el ambiente laboral o acad√©mico:

    -   Al compartirlo, se puede evitar duplicaci√≥n de esfuerzos

    -   Nos permite reproducir de manera m√°s f√°cil los resultados obtenidos

    -   Facilita la correcci√≥n de errores que hayamos podido cometer
:::

# Comenzando por nuestros scripts

## A√±adiendo comentarios {.smaller}

::: incremental
-   Podemos a√±adir comentarios usando `#`

-   Se aconseja que un comentario **no explique** que es lo que hace el c√≥digo,

-   Sino, **por qu√©** lo hiciste
:::

. . .

::: columns
::: {.column width="50%"}
```{r}
#| eval: false
#| echo: true

library(palmerpenguins) 

penguins %>%
  group_by(species) %>%
  filter(!is.na(sex)) %>% # filtrar NAs
  summarise(
    media_body = mean(body_mass_g, na.rm = T), # calc. media peso
    sd_body = sd(body_mass_g, na.rm = T), # cal. desv. est. peso
  )

```
:::

::: {.column width="50%"}
```{r}
#| eval: false
#| echo: true

# Remueve los valores perdidos de la 
# variable sex y calcula la media aritmetica
# y desviacion estandar de body_mass_g
# usando la tabla penguins de la libreria
# palmerpenguins

library(palmerpenguins)

penguins %>%
  group_by(species) %>%
  filter(!is.na(sex)) %>% 
  summarise(
    media_body = mean(body_mass_g, na.rm = T), 
    sd_body = sd(body_mass_g, na.rm = T), 
  )

```
:::
:::

. . .

Notar√°s que la forma de la derecha parece un poco tediosa de redactar para cada paso que des en tu an√°lisis. Sin embargo, piensa en ti mismo leyendo tu c√≥digo en unos cuantos meses en el futuro üòâ

## Secciones y subsecciones

::: columns
::: {.column width="50%"}
Una ventaja de RStudio es que podemos a√±adir secciones y subsecciones a nuestro c√≥digo

```{r}
#| eval: false
#| echo: true

# Cargando datos ------------------

## Analisis de varianza -----------

## Creacion de graficas -----------
```
:::

::: {.column width="50%"}
![](images/secciones.png){fig-align="center"}
:::
:::

## C√≥digo legible

Esta l√≠nea de c√≥digo corre sin errores, pero...

```{r}
#| eval: false
#| echo: true

penguins%>%filter(!is.na(sex))%>%group_by(species, island)%>%summarise(obs=n(body_mass_g),media=mean(body_mass_g),desv.std=sd(body_mass_g))
```

. . .

¬øNo es m√°s facil leer esto?

```{r}
#| eval: false
#| echo: true

penguins %>% 
  filter(!is.na(sex)) %>% 
  group_by(species, island) %>% 
  summarise(obs = n(body_mass_g), 
            media = mean(body_mass_g), 
            desv.std = sd(body_mass_g))
```

## Linting {.smaller}

::: incremental

-   ***Linting***, desde el punto de vista de la programaci√≥n, es una expresi√≥n en Ingl√©s que se puede traducir al Espa√±ol como la pr√°ctica de estilizar c√≥digo (***linting*** en Espa√±ol se traduce literalmente a ***pelusa*** ¬Ø\\*(„ÉÑ)*/¬Ø)

-   C√≥mo estilicemos nuestro c√≥digo es algo ya personal, sin embargo existen varias "convenciones" que nos pueden guiar a tener c√≥digos m√°s legibles, algunas de ellas:

    -   Deja espacios vac√≠os antes y despues de `=`, `<-`, `-`, `+`, `%>%` etc
    
    -   Un espacio vac√≠o despu√©s de `,`

    -   Da cortes de l√≠nea (enter) donde sea necesario para que las l√≠neas de c√≥digo no sean muy largas

    -   Deja un espacio vac√≠o entre l√≠neas o conjuntos de l√≠neas que cumplen con una funci√≥n espec√≠fica.

-   Estas y otras convenciones las puedes llevar a cabo a mano, o en R, puedes ayudarte de las librer√≠as `{lintr}` y `{styler}`.
:::

## {lintr} {.smaller}

::: incremental

1.    Comenzaremos instalando `{lintr}`: `install.packages("lintr")`

2.    En nuevo script en tu sesi√≥n de R, copia el siguiente c√≥digo y gu√°rdalo bajo el nombre "ejemplo_lint.R"

:::

. . .

```{r}
#| echo: true
#| eval: false
library(palmerpenguins)
tabla_resumen<-penguins%>%filter(!is.na(sex))%>%group_by(species, island)%>%summarise(obs=n(body_mass_g),media=mean(body_mass_g),desv.std=sd(body_mass_g))
```

::: incremental

3.    Sobre la pesta√±a con el nombre de tu script, haz click derecho y copia el *path*

:::

. . .

![](images/path.png){fig-align="center"}

::: incremental

4.    En la consola de R, carga la librer√≠a `{lintr}`, y ejecuta el comando `lint` pegando entre comillas el *path* que acabas de copiar, en mi caso:

:::

. . .

```{r}
#| echo: true
#| eval: false
library(lintr)
lint("C:/Users/mmore/Documents/cursos_2024/biohack/biohack-modulo2/ejemplo_lint.R")
```

## {lintr} {.smaller visibility="uncounted"}

5.    Al ejecutar esas l√≠neas, te aparecer√° una nueva pesta√±a junto a tu consola llamada *Markers*. Ah√≠, estar√°n las correcciones de estilo sugeridas por `{lintr}`

![](images/markers.png){fig-align="center"}

## {styler}

-   Como viste, `{lintr}` solamente te sugiere los cambios a realizar para mejorar el estilo de tu c√≥digo.

-   Al contrario, `{styler}` lleva a cabo la mayor√≠a de las sugerencias de `{lintr}` por ti

::: incremental

1.    Instalamos `{styler}`: `install.packages("styler")`

2.    En la consola, ejecutamos algo similar a lo que hicimos con `{lintr}`

:::

. . .

```{r}
#| echo: true
#| eval: false
library(styler)
style_file("C:/Users/mmore/Documents/cursos_2024/biohack/biohack-modulo2/ejemplo_lint.R")
```

. . .

3.    Ahora tu script debe estar estilizado!


## Modularizando tus scripts {.smaller}

Imagina que tu trabajo puede comenzar con una carpeta cuya estructura se ve m√°s o menos as√≠:

```{r}
#| eval: false
#| code-line-numbers: false
#| echo: true
tesis
‚îÇ   analisis datos.R
‚îÇ   datos tesis.xlsx
```

. . .

Esto est√° bien en un principio, pero

::: incremental

-   A medida que agregues m√°s an√°lisis en tu script, puedes f√°cilmente terminar con miles de l√≠neas de c√≥digo.

-   En este caso, ya ni las secciones y subsecciones ayudan mucho para navegarlo.

-   En tu script, seguramente llevas a cabo m√∫ltiples cosas (cargar y limpiar datos, crear modelos, generar figuras...)

-   Puedes entonces pensar en modularizarlo!

:::

. . .

El modularizar un script consiste simplemente en dividirlo en m√∫ltiples scripts de menor tama√±o bas√°ndote en las tareas que realizas en tu c√≥digo.


<!-- . . . -->

<!-- Pero tras varias revisiones de tu director/jefe/cliente puedes terminar con algo como -->

<!-- ```{r} -->
<!-- #| eval: false -->
<!-- #| code-line-numbers: false -->
<!-- #| echo: true -->
<!-- tesis -->
<!-- ‚îÇ   analisis capitulo 3.R -->
<!-- ‚îÇ   analisis capitulo 3 esta vez si.R -->
<!-- ‚îÇ   analisis capitulo 4.R -->
<!-- ‚îÇ   borrador tesis 1.docx -->
<!-- ‚îÇ   correccion primer analisis.R -->
<!-- ‚îÇ   datos tesis.xlsx -->
<!-- ‚îÇ   datos tesis corregidos.xlsx -->
<!-- ‚îÇ   imagen resultado 1.png -->
<!-- ‚îÇ   imagen resultado 2.png -->
<!-- ``` -->



## Modularizaci√≥n

Este bien podr√≠a ser el flujo de trabajo m√°s simple que podriamos imaginarnos:

```{mermaid}
flowchart LR
    A[Cargar librer√≠as] --> B[Cargar datos]
    B --> C[Limpiar datos]
    C --> D[An√°lisis Exploratorio]
    D --> E[Estad√≠sticos Descriptivos]
    E --> F[Modelo Estad√≠stico]
    F --> G[Resultados Finales]
```

. . .

Sin embargo, para trabajos sencillos, un flujo tan detallado no hace falta (excepto si tu c√≥digo va a ser usado para *producci√≥n*). Entonces, tambi√©n podr√≠amos tener:

```{mermaid}
flowchart LR
    A[Cargar librer√≠as<br>Cargar datos<br>Limpiar datos] --> B[An√°lisis Exploratorio]
    B --> C[Estad√≠sticos Descriptivos]
    C --> D[Modelo Estad√≠stico]
    D --> E[Resultados Finales]
```

. . .

En resumen, al modularizar tu c√≥digo, las decisiones que tomes depender√°n por supuesto de las necesidades de tu problema y tu estilo de programaci√≥n.

## Nombrando tus m√≥dulos

::: columns
::: {.column width="50%"}

Una opci√≥n:

```{r}
#| eval: false
#| code-line-numbers: false
#| echo: true
tesis
‚îÇ   carga limpieza datos.R
‚îÇ   librerias y funciones.R
‚îÇ   estadisticos descriptivos.R
‚îÇ   estadisticos inferenciales.R
‚îÇ   analisis exploratorio.R
‚îÇ   tablas y figuras.R
‚îÇ   datos tesis.xlsx
```


:::


::: {.column .fragment width="50%"}
Una **mejor** opci√≥n:

```{r}
#| eval: false
#| code-line-numbers: false
#| echo: true
tesis
‚îÇ   00_librerias_funciones.R
‚îÇ   01_carga_limpieza_datos.R
‚îÇ   02_analisis_exploratorio.R
‚îÇ   03_estadisticos_descriptivos.R
‚îÇ   04_estadisticos_inferenciales.R
‚îÇ   05_tablas_figuras.R
‚îÇ   datos_tesis.xlsx
```
:::
:::

. . .

::: {.callout-tip}
## Tips para nombrar tus archivos

-   Empieza con un prefijo num√©rico de dos d√≠gitos

-   Dales nombres descriptivos

-   Evita espacios vac√≠os (puedes usar - √≥ _)

-   Evita caract√©res especiales (como tildes, la letra √±, etc) o innecesarios al contexto (como la letra "y")

:::

## Y, ¬øahora?

![](images/ahora.jpg){fig-align="center"}

Tenemos la idea b√°sica de modularizar, pero ahora, ¬øc√≥mo hacemos para que R sepa c√≥mo usar nuestros m√≥dulos?

# Proyectos en R

## Introducci√≥n {.smaller}

::: incremental

-   Bajo la l√≥gica de un solo script, es necesario el especificar en R cual es nuestro directorio de trabajo.

-   Esto se lo consigue usando el comando `setwd`  que funciona de una manera similar a estar copiando el *path* como vimos para `{lintr}` y `{styler}`.

-   Pero al modularizar, esto significar√≠a el cambiar constantemente el *path* conforme avancemos y cambiemos cosas en nuestro trabajo en cada uno de los m√≥dulos que creemos.

-   Afortunadamente, RStudio nos ofrece la funcionalidad de trabajar bajo la modalidad de Proyectos que ofrece entre otras ventajas:

    -   No especificar repetitivamente el directorio de trabajo
    
    -   Organizar de manera m√°s flexible la estructura de nuestro proyecto
    
    -   Poder incluso cambiar la ubicaci√≥n del proyecto en nuestro computador, sin necesidad de que se comprometa su funcionamiento.

:::



## Creando un proyecto {.smaller}

::: columns
::: {.column width="40%"}
![](images/paso_1.png){fig-align="center"}
:::

::: {.column width="60%"}
1.    Click en *File* (Archivo)
    
2.    Click en *New Project...* (Nuevo proyecto...)
:::
:::


## Creando un proyecto {visibility="uncounted" .smaller}

::: columns
::: {.column width="40%"}
![](images/win1.png){fig-align="center"}
:::

::: {.column width="60%"}
1.    Click en *File* (Archivo)
    
2.    Click en *New Project...* (Nuevo proyecto...)

3.    Click en *New Directory* (Nuevo Directorio)
:::
:::




## Creando un proyecto {visibility="uncounted" .smaller}

::: columns
::: {.column width="40%"}
![](images/win3.png){fig-align="center"}
:::

::: {.column width="60%"}
1.    Click en *File* (Archivo)
    
2.    Click en *New Project...* (Nuevo proyecto...)

3.    Click en *New Directory* (Nuevo directorio)

4.    Click en *New Project* (Nuevo proyecto)
:::
:::

## Creando un proyecto {visibility="uncounted" .smaller}

::: columns
::: {.column width="40%"}
![](images/win2.png){fig-align="center"}
:::

::: {.column width="60%"}
1.    Click en *File* (Archivo)
    
2.    Click en *New Project...* (Nuevo proyecto...)

3.    Click en *New Directory* (Nuevo directorio)

4.    Click en *New Project* (Nuevo proyecto)

5.    Escoger la ubicaci√≥n donde crearemos el nuevo proyecto y el nombre del directorio. 
:::
:::

## Creando un proyecto {visibility="uncounted" .smaller}

![](images/win4.png){fig-align="center"}

## Creando un proyecto {visibility="uncounted" .smaller}

::: columns
::: {.column width="40%"}
![](images/win5.png){fig-align="center"}
:::

::: {.column width="60%"}
-   En la pesta√±a de *Files* (Archivos) es donde podremos poner en pr√°ctica la organizaci√≥n de nuestro proyecto.
:::
:::

## Conectando nuestros m√≥dulos {.smaller}

Ahora que hemos creado nuestro primer proyecto, vamos por un ejemplo b√°sico de c√≥mo conectar los m√≥dulos.

. . .

1.    Supongamos que vamos a hacer un an√°lisis de los datos de los Ping√ºinos de Palmer. Sin adentrarme mucho en el c√≥digo, crea un script de nombre "00_librerias_funciones.R" con el siguiente contenido:

```{r}
#| echo: true
#| eval: false
if (!require("rlang")) install.packages("rlang")

library(palmerpenguins)
library(ggplot2)
library(dplyr)
library(rlang)

# Funcion para plotear el largo vs la profundidad del pico por sexo
# A√±ade una linea de regresi√≥n a los puntos
# Argumentos: especie = especie de pinguino; isla = isla donde vive la especie

plt_function <- function(especie, isla){
  penguins %>%
    filter(species == parse_expr(especie) & island == parse_expr(isla)) %>%
    filter(!is.na(sex)) %>%
    ggplot(aes(x = bill_length_mm, y = bill_depth_mm)) +
    geom_smooth(method = "lm", formula = y ~ x) + 
    geom_point() +
    facet_wrap(~ sex, scales = "free_x") +
    theme_bw()+
    labs(title = "Largo de pico vs. profundidad de pico",
         subtitle = paste0("Especie: ", especie, ". Isla: ", isla),
         x = "largo (mm)", y = "profundidad (mm)")
}
```

## Conectando nuestros m√≥dulos {.smaller}

2.    Ahora, en un script aparte de nombre "01_figuras.R", llamaremos al script que creamos anteriormente usando el comando `source`

```{r}
#| echo: true
#| eval: false
source("00_librerias_funciones.R")

# Creando plots --------------------------

## Adelie --------------------------------

### Torgersen ----------------------------

plt_function("Adelie", "Torgersen")

### Biscoe -------------------------------

plt_function("Adelie", "Biscoe")

### Dream --------------------------------

plt_function("Adelie", "Dream")
```

. . . 

3.    Ejecuta el script "01_figuras.R"

## La magia de `source` {.smaller}

::: incremental

-   `source` es el conector que necesitamos para relacionar nuestros scripts modularizados.

-   Generalmente el script con prefijo "00" es el que nos ayudar√° a contener pasos fundamentales. En este ejemplo, he puesto una funci√≥n sencilla para automatizar un proceso.

    -   Esto es com√∫n en la industria, pero para fines acad√©micos y/o de uso a menor escala no es tan necesario. Por esa raz√≥n no cubrimos en el curso la creaci√≥n de funciones.
    
    -   En los casos m√°s sencillos, recomiendo el usar el prefijo "00" para el script donde lleves a cabo limpieza de datos.

-   As√≠, si cambias algo en tus tablas originales de datos, y si has interconectado correctamente tus m√≥dulos, puedes hacer que esos cambios en los datos sean tomados en cuenta en todos tus productos de an√°lisis.

:::

. . .

::: {.callout-note}
Cuando la organizaci√≥n de tu flujo de trabajo es muy complicada, `source` puede llegar a fallar. En ese caso, te recomiendo darle un vistazo al paquete [`{here}`](https://here.r-lib.org/){target="_blank"}
:::



## Organizando a√∫n m√°s {.smaller} 

::: columns
::: {.column width="50%"}
```{r}
#| eval: false
#| code-line-numbers: false
#| echo: true
tesis
‚îÇ   tesis.Rproj
‚îÇ   00_librerias_funciones.R
‚îÇ   01_carga_limpieza_datos.R
‚îÇ   02_analisis_exploratorio.R
‚îÇ   03_estadisticos_descriptivos.R
‚îÇ   04_estadisticos_inferenciales.R
‚îÇ   05_tablas_figuras.R
‚îÇ   datos_tesis.xlsx
‚îÇ   dispersion_a.png
‚îÇ   dispersion_b.png
‚îÇ   dispersion_c.png
‚îÇ   tabla_anova_a.docx
‚îÇ   tabla_anova_b.docx
‚îÇ   tabla_anova_c.docx
```
:::

::: {.column .fragment width="50%"}
```{r}
#| eval: false
#| code-line-numbers: false
#| echo: true
tesis
‚îÇ   tesis.Rproj
‚îî‚îÄ‚îÄ‚îÄdatos
‚îÇ   ‚îÇ   datos_tesis.xlsx
‚îî‚îÄ‚îÄ‚îÄfiguras
‚îÇ   ‚îÇ   dispersion_a.png
‚îÇ   ‚îÇ   dispersion_b.png
‚îÇ   ‚îÇ   dispersion_c.png
‚îî‚îÄ‚îÄ‚îÄR
‚îÇ   ‚îÇ   00_librerias_funciones.R
‚îÇ   ‚îÇ   01_carga_limpieza_datos.R
‚îÇ   ‚îÇ   02_analisis_exploratorio.R
‚îÇ   ‚îÇ   03_estadisticos_descriptivos.R
‚îÇ   ‚îÇ   04_estadisticos_inferenciales.R
‚îÇ   ‚îÇ   05_tablas_figuras.R
```
:::
:::

# Antes de terminar

## Conflictos {.smaller}

::: incremental

-   Habiendo miles de paquetes, es com√∫n que a veces algunos utilicen los mismos nombres para sus funciones.

-   Cuando esto ocurre, R te lo dejar√° saber al cargar un paquete con un mensaje similar a esto

:::

. . .

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: false
> library(dplyr)

Attaching package: ‚Äòdplyr‚Äô

The following objects are masked from ‚Äòpackage:stats‚Äô:

    filter, lag

The following objects are masked from ‚Äòpackage:base‚Äô:

    intersect, setdiff, setequal, union

```

. . .

-   Si vas a usar las funciones de un paquete pocas veces, es recomendable llamar a las funciones de manera directa sin cargar el paquete en su totalidad. Esto se consigue usando el comando `::`

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: false
tidyr::pivot_longer()
```

## R es un lenguaje extra√±o
:::incremental
-   ¬øRecuerdas que alg√∫n momento mencion√© que hay que evitar nombrar nuestros objetos de R con nombres de funciones de otros paquetes?

-   Hace poco conoc√≠ de este curioso ejemplo, si creamos una funci√≥n del mismo nombre que `mean`, que haga cualquier otra cosa excepto calcular la media aritm√©tica

:::

. . .

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: false
mean <- function(vector){
  return(print(vector))
}
```

. . .

-   Enmascara en tu sesi√≥n a la funci√≥n base verdadera `mean`. Esto no sucede en otros lenguajes de programaci√≥n.

## {}

::: columns
::: {.column width="60%"}

::: {.title data-id="title"}
Fin del m√≥dulo 2
:::

::: {.callout-tip}
## Cr√©ditos

Este m√≥dulo est√° basado en una buena extensi√≥n en la charla [***Stop making spaghetti (code)***](https://nrennie.rbind.io/talks/useR-spaghetti-code/slides.html#/section){target="_blank"} de la [Prof. Nicola Rennie, PhD](https://nrennie.rbind.io/){target="_blank"}

Foto portada por <a href="https://unsplash.com/@patwhelen?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash">Pat Whelen</a> en <a href="https://unsplash.com/photos/train-rail-near-brown-building-during-daytime-yRvYmE7WVec?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash">Unsplash</a>
  

Foto final por <a href="https://unsplash.com/@hongkyu?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash">PARK HONG KYU</a> en <a href="https://unsplash.com/photos/white-and-black-boat-on-sea-during-sunset-f7efwMH5esE?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash">Unsplash</a>

:::

:::

::: {.column width="37.5%"}

![](images/icon1_nb.png){style="margin-left:125px"}


:::
:::

![](images/park-hong-kyu-f7efwMH5esE-unsplash.jpg){.image-right}